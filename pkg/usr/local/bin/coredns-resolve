#!/bin/bash
# coredns-resolve - Manage systemd-resolved integration with CoreDNS
#
# Usage:
#   coredns-resolve status          - Show current systemd-resolved status
#   coredns-resolve disable         - Disable systemd-resolved DNS stub listener
#   coredns-resolve enable          - Re-enable systemd-resolved DNS stub listener
#   coredns-resolve check           - Check if port 53 is available
#   coredns-resolve configure       - Interactive configuration wizard
#   coredns-resolve help            - Show this help

set -e

RESOLVED_CONF="/etc/systemd/resolved.conf"

show_help() {
    grep "^# " "$0" | grep -v "^#!" | sed 's/^# *//'
}

require_root() {
    if [ "$EUID" -ne 0 ]; then
        echo "Error: This command requires root privileges"
        exit 1
    fi
}

show_status() {
    echo "=== systemd-resolved Status ==="
    echo ""
    
    # Check if resolved is running
    if systemctl is-active --quiet systemd-resolved; then
        echo "✓ systemd-resolved service: RUNNING"
    else
        echo "✗ systemd-resolved service: STOPPED"
    fi
    
    # Check DNS stub listener status
    if grep -q "^DNSStubListener=no" "$RESOLVED_CONF" 2>/dev/null; then
        echo "✓ DNS stub listener: DISABLED"
        echo "  (Port 53 is available for CoreDNS)"
    elif grep -q "^#DNSStubListener" "$RESOLVED_CONF" 2>/dev/null || ! grep -q "DNSStubListener" "$RESOLVED_CONF" 2>/dev/null; then
        echo "⚠ DNS stub listener: DEFAULT (enabled)"
        echo "  (Port 53 may be in use by systemd-resolved)"
    else
        echo "⚠ DNS stub listener: ENABLED"
        echo "  (Port 53 may be in use by systemd-resolved)"
    fi
    
    echo ""
    echo "=== Port 53 Status ==="
    check_port_53
    
    echo ""
    echo "=== CoreDNS Status ==="
    if systemctl is-active --quiet coredns 2>/dev/null; then
        echo "✓ CoreDNS service: RUNNING"
    else
        echo "✗ CoreDNS service: NOT RUNNING"
    fi
}

check_port_53() {
    if command -v ss &>/dev/null; then
        # Check what's listening on port 53
        if ss -tulpn 2>/dev/null | grep -q ":53 "; then
            echo "Port 53 is in use by:"
            ss -tulpn 2>/dev/null | grep ":53 " | awk '{print $7}' | sed 's/^/  /'
        else
            echo "Port 53 is available"
        fi
    elif command -v netstat &>/dev/null; then
        # Fallback to netstat if ss not available
        if netstat -tulpn 2>/dev/null | grep -q ":53 "; then
            echo "Port 53 is in use"
        else
            echo "Port 53 is available"
        fi
    else
        echo "Cannot check port status (ss and netstat not available)"
    fi
}

disable_stub_listener() {
    require_root
    
    echo "Disabling systemd-resolved DNS stub listener..."
    echo ""
    
    # Backup the config file
    if [ -f "$RESOLVED_CONF" ]; then
        cp "$RESOLVED_CONF" "${RESOLVED_CONF}.backup.$(date +%s)"
        echo "✓ Backup created: ${RESOLVED_CONF}.backup.*"
    fi
    
    # Check if already disabled
    if grep -q "^DNSStubListener=no" "$RESOLVED_CONF" 2>/dev/null; then
        echo "✓ DNS stub listener is already disabled"
    else
        # Disable the stub listener
        if grep -q "^#DNSStubListener=yes" "$RESOLVED_CONF" 2>/dev/null; then
            # Just uncomment and change the existing line
            sed -i 's/^#DNSStubListener=yes/DNSStubListener=no/' "$RESOLVED_CONF"
            echo "✓ Modified existing DNSStubListener setting"
        elif grep -q "^DNSStubListener" "$RESOLVED_CONF" 2>/dev/null; then
            # Replace existing setting
            sed -i 's/^DNSStubListener=.*/DNSStubListener=no/' "$RESOLVED_CONF"
            echo "✓ Updated DNSStubListener setting"
        else
            # Add new setting to [Resolve] section or at the end
            if grep -q "^\[Resolve\]" "$RESOLVED_CONF" 2>/dev/null; then
                sed -i '/^\[Resolve\]/a DNSStubListener=no' "$RESOLVED_CONF"
                echo "✓ Added DNSStubListener=no to [Resolve] section"
            else
                echo "" >> "$RESOLVED_CONF"
                echo "[Resolve]" >> "$RESOLVED_CONF"
                echo "DNSStubListener=no" >> "$RESOLVED_CONF"
                echo "✓ Added [Resolve] section with DNSStubListener=no"
            fi
        fi
    fi
    
    # Restart systemd-resolved
    echo ""
    echo "Restarting systemd-resolved..."
    systemctl restart systemd-resolved
    sleep 1
    
    if systemctl is-active --quiet systemd-resolved; then
        echo "✓ systemd-resolved restarted successfully"
    else
        echo "✗ Warning: systemd-resolved failed to restart"
        echo "  Check logs: sudo journalctl -u systemd-resolved -n 20"
    fi
    
    echo ""
    echo "=== Configuration Complete ==="
    echo "Port 53 is now available for CoreDNS"
    echo ""
    echo "Next steps:"
    echo "  1. Verify CoreDNS starts: sudo systemctl start coredns"
    echo "  2. Test DNS resolution: dig @127.0.0.1"
    echo ""
}

enable_stub_listener() {
    require_root
    
    echo "Enabling systemd-resolved DNS stub listener..."
    echo ""
    
    # Backup the config file
    if [ -f "$RESOLVED_CONF" ]; then
        cp "$RESOLVED_CONF" "${RESOLVED_CONF}.backup.$(date +%s)"
        echo "✓ Backup created: ${RESOLVED_CONF}.backup.*"
    fi
    
    # Check if already enabled
    if grep -q "^DNSStubListener=yes" "$RESOLVED_CONF" 2>/dev/null || ! grep -q "^DNSStubListener" "$RESOLVED_CONF" 2>/dev/null; then
        echo "✓ DNS stub listener is already enabled (or default)"
    else
        # Enable the stub listener
        sed -i 's/^DNSStubListener=no/DNSStubListener=yes/' "$RESOLVED_CONF"
        echo "✓ Updated DNSStubListener setting"
    fi
    
    # Restart systemd-resolved
    echo ""
    echo "Restarting systemd-resolved..."
    systemctl restart systemd-resolved
    sleep 1
    
    if systemctl is-active --quiet systemd-resolved; then
        echo "✓ systemd-resolved restarted successfully"
    else
        echo "✗ Warning: systemd-resolved failed to restart"
        echo "  Check logs: sudo journalctl -u systemd-resolved -n 20"
    fi
    
    echo ""
    echo "=== Configuration Complete ==="
    echo "systemd-resolved DNS stub listener is now enabled"
    echo "Port 53 is now in use by systemd-resolved"
    echo ""
}

configure_interactive() {
    require_root
    
    clear
    echo "╔════════════════════════════════════════════════════════════════╗"
    echo "║       CoreDNS and systemd-resolved Configuration Wizard       ║"
    echo "╚════════════════════════════════════════════════════════════════╝"
    echo ""
    
    # Show current status
    echo "Current Configuration:"
    echo "  CoreDNS: $(systemctl is-active --quiet coredns && echo 'RUNNING' || echo 'STOPPED')"
    echo "  systemd-resolved: $(systemctl is-active --quiet systemd-resolved && echo 'RUNNING' || echo 'STOPPED')"
    
    if grep -q "^DNSStubListener=no" "$RESOLVED_CONF" 2>/dev/null; then
        echo "  DNS stub listener: DISABLED"
    else
        echo "  DNS stub listener: ENABLED"
    fi
    
    echo ""
    echo "Port 53 is currently used by:"
    check_port_53 | sed 's/^/  /'
    
    echo ""
    echo "What would you like to do?"
    echo ""
    echo "1) Use CoreDNS (disable systemd-resolved stub listener)"
    echo "2) Use systemd-resolved (enable stub listener, stop CoreDNS)"
    echo "3) Show configuration status and exit"
    echo "4) Exit without changes"
    echo ""
    read -p "Select option (1-4): " choice
    
    case "$choice" in
        1)
            echo ""
            disable_stub_listener
            echo "You can now enable CoreDNS:"
            echo "  sudo systemctl enable coredns"
            echo "  sudo systemctl start coredns"
            ;;
        2)
            echo ""
            echo "Stopping CoreDNS..."
            systemctl stop coredns || true
            systemctl disable coredns || true
            enable_stub_listener
            echo "CoreDNS has been stopped and systemd-resolved is now handling DNS"
            ;;
        3)
            echo ""
            show_status
            ;;
        4)
            echo "No changes made"
            ;;
        *)
            echo "Invalid option"
            exit 1
            ;;
    esac
}

# Main script
case "${1:-help}" in
    status)
        show_status
        ;;
    disable)
        disable_stub_listener
        ;;
    enable)
        enable_stub_listener
        ;;
    check)
        check_port_53
        ;;
    configure)
        configure_interactive
        ;;
    help|--help|-h)
        show_help
        ;;
    *)
        echo "Unknown command: $1"
        show_help
        exit 1
        ;;
esac
